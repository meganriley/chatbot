{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/LearningOptions/LearningOptions.jsx","components/LinkList/LinkList.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleJavascriptList","message","widget","updateChatbotState","this","setState","greetingMessage","prevState","messages","MessageParser","actionProvider","lowerCaseMessage","toLowerCase","includes","greet","LearningOptions","props","optionsMarkup","text","handler","id","map","option","className","onClick","LinkList","linkMarkup","options","link","href","url","target","rel","config","botName","initialMessages","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","App","messageParser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAqCiBA,E,WApCb,WAAYC,EAAsBC,GAAe,IAAD,gCAKhDC,qBAAuB,WACrB,IAAMC,EAAU,EAAKH,qBACnB,qEACA,CACEI,OAAQ,oBAIZ,EAAKC,mBAAmBF,IAZxBG,KAAKN,qBAAuBA,EAC5BM,KAAKC,SAAWN,E,yCAelB,WACE,IAAMO,EAAkBF,KAAKN,qBAAqB,eAClDM,KAAKD,mBAAmBG,K,gCAG1B,SAAmBL,GAQlBG,KAAKC,UAAS,SAAAE,GAAS,kCACfA,GADe,IACJC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BP,a,KCdzCQ,E,WAjBb,WAAYC,GAAiB,oBAC3BN,KAAKM,eAAiBA,E,yCAGxB,SAAMT,GACJ,IAAMU,EAAmBV,EAAQW,cAE7BD,EAAiBE,SAAS,UAC5BT,KAAKM,eAAeI,QAGlBH,EAAiBE,SAAS,eAC5BT,KAAKM,eAAeV,2B,oBCgBbe,EAzBS,SAACC,GACvB,IAWMC,EAXU,CACd,CACIC,KAAM,aACNC,QAASH,EAAMN,eAAeV,qBAC9BoB,GAAI,GACR,CAAEF,KAAM,qBAAsBC,QAAS,aAAUC,GAAI,GACrD,CAAEF,KAAM,OAAQC,QAAS,aAAUC,GAAI,GACvC,CAAEF,KAAM,WAAYC,QAAS,aAAUC,GAAI,GAC3C,CAAEF,KAAM,iBAAkBC,QAAS,aAAUC,GAAI,IAGrBC,KAAI,SAACC,GAAD,OAChC,wBACEC,UAAU,yBAEVC,QAASF,EAAOH,QAHlB,SAKGG,EAAOJ,MAHHI,EAAOF,OAOhB,OAAO,qBAAKG,UAAU,6BAAf,SAA6CN,KCLvCQ,G,MAjBE,SAACT,GAChB,IAAMU,EAAaV,EAAMW,QAAQN,KAAI,SAACO,GAAD,OACnC,oBAAkBL,UAAU,iBAA5B,SACE,mBACEM,KAAMD,EAAKE,IACXC,OAAO,SACPC,IAAI,sBACJT,UAAU,qBAJZ,SAMGK,EAAKV,QAPDU,EAAKR,OAYhB,OAAO,oBAAIG,UAAU,YAAd,SAA2BG,MCmCrBO,EAhDA,CACbC,QAAS,cACTC,gBAAiB,CACfrC,+BAAqB,uDAAsD,CACzEI,OAAQ,qBAGZkC,aAAc,CACZC,cAAe,CACbC,gBAAiB,WAEnBC,WAAY,CACVD,gBAAiB,YAGrBE,QAAS,CACP,CACEC,WAAY,kBACZC,WAAY,SAAC1B,GAAD,OAAW,cAAC,EAAD,eAAqBA,MAE9C,CACEyB,WAAY,kBACZC,WAAY,SAAC1B,GAAD,OAAW,cAAC,EAAD,eAAcA,KACrCA,MAAO,CACLW,QAAS,CACP,CACET,KAAM,qBACNY,IACE,iGACFV,GAAI,GAEN,CACEF,KAAM,mBACNY,IACE,gEACFV,GAAI,GAEN,CACEF,KAAM,mBACNY,IAAK,8BACLV,GAAI,QC3BDuB,MAVf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CAASU,OAAQA,EAAQvB,eAAgBb,EAAgB+C,cAAenC,SCAjEoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b80b914a.chunk.js","sourcesContent":["class ActionProvider {\n    constructor(createChatBotMessage, setStateFunc) {\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n    }\n\n    handleJavascriptList = () => {\n      const message = this.createChatBotMessage(\n        \"Fantastic, I've got the following resources for you on Javascript:\",\n        {\n          widget: \"javascriptLinks\",\n        }\n      );\n  \n      this.updateChatbotState(message);\n    };\n\n    \n    greet() {\n      const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\n      this.updateChatbotState(greetingMessage)\n    }\n    \n    updateChatbotState(message) {\n   \n  // NOTE: This function is set in the constructor, and is passed in      \n  // from the top level Chatbot component. The setState function here     \n  // actually manipulates the top level state of the Chatbot, so it's     \n  // important that we make sure that we preserve the previous state.\n   \n      \n     this.setState(prevState => ({\n          ...prevState, messages: [...prevState.messages, message]\n      }))\n    }\n  }\n  \n  export default ActionProvider;","class MessageParser {\n    constructor(actionProvider) {\n      this.actionProvider = actionProvider;\n    }\n  \n    parse(message) {\n      const lowerCaseMessage = message.toLowerCase()\n      \n      if (lowerCaseMessage.includes(\"hello\")) {\n        this.actionProvider.greet()\n      }\n\n      if (lowerCaseMessage.includes(\"javascript\")) {\n        this.actionProvider.handleJavascriptList();\n      }\n    }\n  }\n  \n  export default MessageParser;","import React from \"react\";\n\nimport \"./LearningOptions.css\";\n\nconst LearningOptions = (props) => {\n  const options = [\n    { \n        text: \"Javascript\",\n        handler: props.actionProvider.handleJavascriptList,\n        id: 1,},\n    { text: \"Data visualization\", handler: () => {}, id: 2 },\n    { text: \"APIs\", handler: () => {}, id: 3 },\n    { text: \"Security\", handler: () => {}, id: 4 },\n    { text: \"Interview prep\", handler: () => {}, id: 5 },\n  ];\n\n  const optionsMarkup = options.map((option) => (\n    <button\n      className=\"learning-option-button\"\n      key={option.id}\n      onClick={option.handler}\n    >\n      {option.text}\n    </button>\n  ));\n\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\n};\n\nexport default LearningOptions;","import React from \"react\";\n\nimport \"./LinkList.css\";\n\nconst LinkList = (props) => {\n  const linkMarkup = props.options.map((link) => (\n    <li key={link.id} className=\"link-list-item\">\n      <a\n        href={link.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"link-list-item-url\"\n      >\n        {link.text}\n      </a>\n    </li>\n  ));\n\n  return <ul className=\"link-list\">{linkMarkup}</ul>;\n};\n\nexport default LinkList;","import { createChatBotMessage } from 'react-chatbot-kit';\n\nimport LearningOptions from \"./components/LearningOptions/LearningOptions\";\nimport LinkList from \"./components/LinkList/LinkList\";\n\nconst config = {\n  botName: \"LearningBot\",\n  initialMessages: [\n    createChatBotMessage(\"Hi, I'm here to help. What do you want to \t\tlearn?\", {\n      widget: \"learningOptions\",\n    }),\n  ],\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#376B7E\",\n    }\n  },\n  widgets: [\n    {\n      widgetName: \"learningOptions\",\n      widgetFunc: (props) => <LearningOptions {...props} />,\n    },\n    {\n      widgetName: \"javascriptLinks\",\n      widgetFunc: (props) => <LinkList {...props} />,\n      props: {\n        options: [\n          {\n            text: \"Introduction to JS\",\n            url:\n              \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\n            id: 1,\n          },\n          {\n            text: \"Mozilla JS Guide\",\n            url:\n              \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\n            id: 2,\n          },\n          {\n            text: \"Frontend Masters\",\n            url: \"https://frontendmasters.com\",\n            id: 3,\n          },\n        ],\n      },\n    },\n  ],\n};\n\nexport default config;","import Chatbot from 'react-chatbot-kit'\nimport 'react-chatbot-kit/build/main.css';\nimport './App.css';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}